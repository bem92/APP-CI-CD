name: Backend CI/CD

on:
  push:
    branches:
      - main
      - dev
    paths:
      - "back/**"
  pull_request:
    branches:
      - main
      - dev
    paths:
      - "back/**"
  workflow_dispatch:
    inputs:
      skip-docker:
        description: "Sauter la construction Docker"
        required: false
        type: boolean
        default: false
      skip-sonar:
        description: "Sauter l'analyse SonarCloud"
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  pull-requests: read

env:
  SONAR_HOST_URL: https://sonarcloud.io
  SONAR_ORG: bem92
  SONAR_BACKEND_PROJECT_KEY: ${{ vars.SONAR_BACKEND_PROJECT_KEY || 'back-app' }}

jobs:
  # Tests unitaires du backend avec génération de la couverture de code
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: back
    steps:
      - name: Récupération du code
        uses: actions/checkout@v4

      - name: Installation de Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Lancement des tests avec Maven
        run: |
          mvn -B clean test \
            org.jacoco:jacoco-maven-plugin:prepare-agent \
            org.jacoco:jacoco-maven-plugin:report

      # On sauvegarde tout le dossier target pour le réutiliser dans le job SonarCloud
      - name: Sauvegarde des résultats de tests
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifacts
          path: back/target/

  # Analyse de la qualité du code backend sur SonarCloud
  # S'exécute uniquement si les tests sont passés et que ce n'est pas un fork
  backend-sonar:
    name: Backend SonarCloud
    runs-on: ubuntu-latest
    needs: backend-tests
    if: ${{ needs.backend-tests.result == 'success' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) && (github.event_name != 'workflow_dispatch' || inputs.skip-sonar != true) }}
    steps:
      - name: Récupération du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Installation de Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # On récupère les artifacts du job précédent (tests + coverage)
      - name: Récupération des artifacts de tests
        uses: actions/download-artifact@v4
        with:
          name: backend-artifacts
          path: back/target/

      # Fallback au cas où les classes compilées seraient manquantes
      - name: Compilation si nécessaire
        working-directory: back
        run: |
          if [ ! -d "target/classes" ]; then
            mvn -B compile -DskipTests
          fi

      # Configuration pour les Pull Requests (décoration automatique des PR)
      - name: Configuration des paramètres PR
        id: sonar-context
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "args=-Dsonar.pullrequest.key=${{ github.event.pull_request.number }} -Dsonar.pullrequest.branch=${{ github.head_ref }} -Dsonar.pullrequest.base=${{ github.base_ref }}" >> "$GITHUB_OUTPUT"
          else
            echo "args=" >> "$GITHUB_OUTPUT"
          fi

      - name: Analyse SonarCloud
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACK }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.organization=${{ env.SONAR_ORG }}
            -Dsonar.projectKey=${{ env.SONAR_BACKEND_PROJECT_KEY }}
            -Dsonar.projectBaseDir=back
            -Dsonar.sources=src/main
            -Dsonar.tests=src/test/java
            -Dsonar.java.binaries=target/classes
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
            ${{ steps.sonar-context.outputs.args }}

  # Build et publication de l'image Docker du backend sur Docker Hub
  # Ne s'exécute que sur les branches main et dev après validation des tests et de SonarCloud
  docker-backend:
    name: Docker Backend
    runs-on: ubuntu-latest
    needs:
      - backend-tests
      - backend-sonar
    if: ${{ always() && needs.backend-tests.result == 'success' && (needs.backend-sonar.result == 'success' || needs.backend-sonar.result == 'skipped') && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && (github.event_name != 'workflow_dispatch' || inputs.skip-docker != true) }}
    steps:
      - name: Récupération du code
        uses: actions/checkout@v4

      - name: Configuration de Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Connexion à Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Génération automatique des tags: back-latest pour main, back-dev pour dev
      - name: Génération des tags Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/nejrima/projet10
          flavor: |
            prefix=back-
            latest=false
          tags: |
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            type=raw,value=dev,enable=${{ github.ref_name == 'dev' }}

      - name: Build et push de l'image Docker
        uses: docker/build-push-action@v6
        with:
          context: back
          file: back/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max