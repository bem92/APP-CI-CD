name: Frontend CI/CD

on:
  # Déclenché automatiquement UNIQUEMENT si des fichiers frontend changent
  push:
    branches:
      - main
      - dev
    paths:
      - "front/**"
  pull_request:
    branches:
      - main
      - dev
    paths:
      - "front/**"
  
  # Permet de déclencher manuellement le workflow depuis l'interface GitHub
  workflow_dispatch:
    inputs:
      skip-docker:
        description: "Sauter la construction Docker"
        required: false
        type: boolean
        default: false
      skip-sonar:
        description: "Sauter l'analyse SonarCloud"
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  pull-requests: read

env:
  SONAR_HOST_URL: https://sonarcloud.io
  SONAR_ORG: bem92
  SONAR_FRONTEND_PROJECT_KEY: ${{ vars.SONAR_FRONTEND_PROJECT_KEY || 'front-app' }}

jobs:
  # Tests unitaires du frontend avec génération de la couverture de code
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: front
    outputs:
      lcov-path: ${{ steps.cov.outputs.lcov }}
    steps:
      - name: Récupération du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Installation de Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Installation de Chrome pour les tests
        uses: browser-actions/setup-chrome@v1

      - name: Installation des dépendances npm
        run: npm ci

      - name: Lancement des tests Angular
        env:
          CI: 'true'
          NG_CLI_ANALYTICS: 'false'
        run: npm test -- --watch=false --code-coverage --browsers=ChromeHeadlessCI --no-progress

      # Localisation du fichier de couverture LCOV pour SonarCloud
      - name: Recherche du rapport de couverture
        id: cov
        run: |
          if [ -d coverage ]; then
            lcov=$(find coverage -type f -name "lcov.info" | head -n 1 || true)
          else
            lcov=""
          fi
          if [ -n "$lcov" ]; then
            # Le chemin du rapport doit être relatif au working directory
            echo "lcov=${lcov}" >> "$GITHUB_OUTPUT"
            echo "Rapport LCOV trouvé : ${lcov}"
          else
            echo "lcov=" >> "$GITHUB_OUTPUT"
            echo "Aucun rapport LCOV trouvé"
          fi

      - name: Affichage de la structure du dossier coverage
        if: always()
        run: |
          echo "=== Contenu du dossier coverage ==="
          if [ -d coverage ]; then
            ls -la coverage/
            find coverage -type f -name "*.info" -o -name "*.xml" | head -10
          else
            echo "Le dossier coverage n'existe pas"
          fi

      - name: Échec si la couverture est absente
        if: ${{ steps.cov.outputs.lcov == '' }}
        run: |
          echo "::error::Aucun rapport lcov.info trouvé dans le dossier coverage" >&2
          if [ -d coverage ]; then
            ls -R coverage
          else
            ls -a
          fi
          exit 1

      - name: Sauvegarde des résultats de tests
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifacts
          if-no-files-found: error
          path: |
            front/coverage/**

  # Analyse de la qualité du code frontend sur SonarCloud
  # S'exécute uniquement si les tests sont passés et que ce n'est pas un fork
  frontend-sonar:
    name: Frontend SonarCloud
    runs-on: ubuntu-latest
    needs: frontend-tests
    if: >-
      ${{ needs.frontend-tests.result == 'success' && 
          (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) &&
          (github.event_name != 'workflow_dispatch' || inputs.skip-sonar != true) }}
    steps:
      - name: Récupération du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # On récupère les artifacts du job précédent (coverage)
      - name: Récupération des artifacts de tests
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifacts
          path: front

      - name: Vérification de la structure du coverage téléchargé
        run: |
          echo "=== Vérification de la structure des fichiers ==="
          if [ -d "front/coverage" ]; then
            echo "Dossier front/coverage trouvé"
            ls -la front/coverage/
            find front/coverage -name "lcov.info" -o -name "*.xml" | head -10
          else
            echo "Dossier front/coverage introuvable"
            find . -name "lcov.info" | head -10
          fi

      - name: Préparation du chemin de coverage
        id: coverage-path
        run: |
          # Recherche du fichier lcov.info dans la structure téléchargée
          LCOV_FILE=$(find front -name "lcov.info" -type f | head -n 1)
          if [ -n "$LCOV_FILE" ]; then
            # Chemin relatif depuis le projectBaseDir (front)
            RELATIVE_PATH=${LCOV_FILE#front/}
            echo "lcov-path=${RELATIVE_PATH}" >> "$GITHUB_OUTPUT"
            echo "Fichier LCOV trouvé : ${LCOV_FILE}"
            echo "Chemin relatif : ${RELATIVE_PATH}"
          else
            echo "::error::Aucun fichier lcov.info trouvé après téléchargement des artifacts"
            exit 1
          fi

      # Configuration pour les Pull Requests
      - name: Configuration des paramètres PR
        id: sonar-context
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "args=-Dsonar.pullrequest.key=${{ github.event.pull_request.number }} -Dsonar.pullrequest.branch=${{ github.head_ref }} -Dsonar.pullrequest.base=${{ github.base_ref }}" >> "$GITHUB_OUTPUT"
          else
            echo "args=" >> "$GITHUB_OUTPUT"
          fi

      - name: Analyse SonarCloud
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONT }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.organization=${{ env.SONAR_ORG }}
            -Dsonar.projectKey=${{ env.SONAR_FRONTEND_PROJECT_KEY }}
            -Dsonar.projectBaseDir=front
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions=**/*.spec.ts,**/*.test.ts
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/*.spec.ts,**/*.test.ts
            -Dsonar.javascript.lcov.reportPaths=${{ steps.coverage-path.outputs.lcov-path }}
            -Dsonar.typescript.lcov.reportPaths=${{ steps.coverage-path.outputs.lcov-path }}
            ${{ steps.sonar-context.outputs.args }}

  # Build et publication de l'image Docker du frontend sur Docker Hub
  # Ne s'exécute que sur les branches main et dev après validation des tests et de SonarCloud
  docker-frontend:
    name: Docker Frontend
    runs-on: ubuntu-latest
    needs:
      - frontend-tests
      - frontend-sonar
    if: >-
      ${{ always() &&
          needs.frontend-tests.result == 'success' &&
          (needs.frontend-sonar.result == 'success' || needs.frontend-sonar.result == 'skipped') &&
          (github.event_name == 'push' || github.event_name == 'workflow_dispatch') &&
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') &&
          (github.event_name != 'workflow_dispatch' || inputs.skip-docker != true) }}
    steps:
      - name: Récupération du code
        uses: actions/checkout@v4

      - name: Configuration de Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Connexion à Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Génération automatique des tags: front-latest pour main, front-dev pour dev
      - name: Génération des tags Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/nejrima/projet10
          flavor: |
            prefix=front-
            latest=false
          tags: |
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            type=raw,value=dev,enable=${{ github.ref_name == 'dev' }}

      - name: Build et push de l'image Docker
        uses: docker/build-push-action@v6
        with:
          context: front
          file: front/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max